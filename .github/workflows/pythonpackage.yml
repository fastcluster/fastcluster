name: Test, build, and publish

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }}, Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13", ">=3.13"]
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: pip install tox
      - name: Run tests
        run: tox
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v5
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: auto64
          CIBW_TEST_REQUIRES: pytest scipy>=1.15
          CIBW_TEST_COMMAND: 'pytest -s {project}/tests'
          CIBW_SKIP: pp* *-musllinux_* *s390x *ppc64le
      - uses: actions/upload-artifact@v5
        with:
          path: ./wheelhouse/*.whl
          name: artifacts-${{ matrix.os }}
          if-no-files-found: error
  build_sdist:
    name: Build source distribution
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Build sdist
        run: pipx run build --sdist
      - uses: actions/upload-artifact@v5
        with:
          path: ./dist/*.tar.gz
          name: artifacts-sdist
          if-no-files-found: error
  download_artifacts:
    name: Download and list all artifacts
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download
        uses: actions/download-artifact@v6
        with:
          path: dist
          merge-multiple: true
      - run: ls -la dist
  publish-to-testpypi:
    name: Publish to TestPyPI
    # only publish to TestPyPI on tag pushes
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/test')
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: testpypi
      url: https://test.pypi.org/p/fastcluster
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    steps:
      - name: Download
        uses: actions/download-artifact@v6
        with:
          path: dist
          merge-multiple: true
      - run: ls -la ./dist
      - name: Publish distribution to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
  publish-to-pypi:
    name: Publish to PyPI and GitHub
    # only publish to PyPI on tag pushes
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/fastcluster
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
      contents: write  # action-gh-release seems to need this.
    steps:
      - name: Download
        uses: actions/download-artifact@v6
        with:
          path: dist
          merge-multiple: true
      - run: ls -la ./dist
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/*
